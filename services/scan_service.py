# services/scan_service.py - Updated v·ªõi SSH debugging v√† fixes
import asyncio
import json
import tempfile
import os
from typing import Dict, List, Optional, Any
from datetime import datetime
from sqlalchemy.orm import Session
from fastapi import HTTPException
import subprocess
import yaml
import stat

from models.server import Server
from models.sshkey import SshKey
from dao.server_dao import ServerDao
from dao.ssh_key_dao import SshKeyDao


class ScanService:
    
    @staticmethod
    async def simple_scan(db: Session, server_id: int) -> Dict[str, Any]:
        """
        Th·ª±c hi·ªán scan ƒë∆°n gi·∫£n v·ªõi debug SSH connection
        """
        try:
            # L·∫•y th√¥ng tin server
            server = ServerDao.get_server_by_id(db, server_id)
            if not server:
                raise HTTPException(status_code=404, detail="Server not found")
            
            if not server.ssh_key_id:
                raise HTTPException(status_code=400, detail="Server kh√¥ng c√≥ SSH key")
            
            # L·∫•y SSH key
            ssh_key = SshKeyDao.get_by_id(db, server.ssh_key_id)
            if not ssh_key:
                raise HTTPException(status_code=400, detail="SSH key not found")
            
            print(f"üîç Debug: Server {server.name} ({server.ip_address}:{server.ssh_port})")
            print(f"üîç Debug: SSH Key {ssh_key.name} ({ssh_key.key_type})")
            
            # T·∫°o file SSH key t·∫°m th·ªùi v·ªõi proper permissions
            ssh_key_path = await ScanService._create_temp_ssh_key_secure(ssh_key.private_key)

            try:
                # Th·ª±c hi·ªán c√°c l·ªánh scan c∆° b·∫£n
                basic_commands = [
                    ("pwd", "Get current directory"),
                    ("whoami", "Get current user"),
                    ("hostname", "Get hostname"),
                    ("uname -a", "Get system information"),
                    ("df -h", "Get disk usage"),
                    ("free -h", "Get memory usage"),
                    ("uptime", "Get system uptime")
                ]
                
                results = {}
                for command, description in basic_commands:
                    try:
                        print(f"üîç Executing: {command}")
                        result = await ScanService._execute_ssh_command_secure(
                            server.ip_address, 
                            server.ssh_port,
                            ssh_key_path,
                            command
                        )
                        results[command] = {
                            "description": description,
                            "output": result["stdout"],
                            "error": result["stderr"],
                            "return_code": result["return_code"],
                            "success": result["return_code"] == 0
                        }
                        
                        if result["return_code"] == 0:
                            print(f"‚úÖ {command}: SUCCESS")
                        else:
                            print(f"‚ùå {command}: FAILED - {result['stderr']}")
                            
                    except Exception as e:
                        print(f"‚ùå {command}: EXCEPTION - {str(e)}")
                        results[command] = {
                            "description": description,
                            "output": "",
                            "error": str(e),
                            "return_code": -1,
                            "success": False
                        }
                
                return {
                    "server_id": server_id,
                    "server_name": server.name,
                    "ip_address": server.ip_address,
                    "scan_time": datetime.now().isoformat(),
                    "scan_type": "simple",
                    "results": results
                }
                
            finally:
                # X√≥a file SSH key t·∫°m th·ªùi
                if os.path.exists(ssh_key_path):
                    os.remove(ssh_key_path)
                    print(f"üóëÔ∏è Cleaned up temp SSH key: {ssh_key_path}")
                    
        except Exception as e:
            print(f"‚ùå Scan failed: {str(e)}")
            raise HTTPException(status_code=500, detail=f"Scan failed: {str(e)}")
    
    @staticmethod
    async def _create_temp_ssh_key_secure(private_key: str) -> str:
        """
        T·∫°o file SSH key t·∫°m th·ªùi v·ªõi proper security permissions
        """
        # T·∫°o file t·∫°m th·ªùi trong /tmp v·ªõi secure permissions
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_ssh_key', prefix='scan_') as key_file:
            key_file.write(private_key)
            key_path = key_file.name
        
        # Set proper permissions (owner read only)
        os.chmod(key_path, stat.S_IRUSR)  # 0o400 - read only for owner
        
        print(f"üîë Created secure temp SSH key: {key_path}")
        print(f"üîç Key permissions: {oct(os.stat(key_path).st_mode)[-3:]}")
        
        return key_path
    
    @staticmethod
    async def _execute_ssh_command_secure(
        host: str, 
        port: int, 
        ssh_key_path: str, 
        command: str
    ) -> Dict[str, Any]:
        """
        Th·ª±c hi·ªán SSH command v·ªõi secure options v√† debugging
        """
        cmd = [
            'ssh',
            '-i', ssh_key_path,
            '-p', str(port),
            '-o', 'StrictHostKeyChecking=no',
            '-o', 'UserKnownHostsFile=/dev/null',
            '-o', 'PreferredAuthentications=publickey',  # Ch·ªâ d√πng publickey
            '-o', 'PasswordAuthentication=no',           # Disable password auth  
            '-o', 'PubkeyAuthentication=yes',            # Enable publickey auth
            '-o', 'IdentitiesOnly=yes',                  # Ch·ªâ d√πng key ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
            '-o', 'ConnectTimeout=10',                   # Timeout sau 10s
            '-o', 'BatchMode=yes',                       # Non-interactive mode
            f'root@{host}',
            command
        ]
        
        print(f"üîç SSH Command: {' '.join(cmd[:8])} ... {command}")
        
        try:
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            # Wait v·ªõi timeout
            stdout, stderr = await asyncio.wait_for(
                process.communicate(), 
                timeout=30
            )
            
            result = {
                "return_code": process.returncode,
                "stdout": stdout.decode('utf-8'),
                "stderr": stderr.decode('utf-8')
            }
            
            # Debug output
            if process.returncode != 0:
                print(f"‚ùå SSH failed with return code: {process.returncode}")
                print(f"‚ùå STDERR: {result['stderr']}")
            
            return result
            
        except asyncio.TimeoutError:
            process.kill()
            await process.wait()
            return {
                "return_code": -1,
                "stdout": "",
                "stderr": "SSH command timed out after 30 seconds"
            }
        except Exception as e:
            return {
                "return_code": -1,
                "stdout": "",
                "stderr": f"SSH execution failed: {str(e)}"
            }

    @staticmethod
    async def test_ssh_connection_debug(db: Session, server_id: int) -> Dict[str, Any]:
        """
        Test SSH connection v·ªõi detailed debugging
        """
        try:
            server = ServerDao.get_server_by_id(db, server_id)
            if not server:
                raise HTTPException(status_code=404, detail="Server not found")
            
            ssh_key = SshKeyDao.get_by_id(db, server.ssh_key_id)
            if not ssh_key:
                raise HTTPException(status_code=400, detail="SSH key not found")
            
            print(f"üîç Testing SSH connection to {server.ip_address}:{server.ssh_port}")
            
            # Test 1: SSH key format validation
            ssh_key_path = await ScanService._create_temp_ssh_key_secure(ssh_key.private_key)
            
            try:
                # Test 2: SSH v·ªõi single simple command
                result = await ScanService._execute_ssh_command_secure(
                    server.ip_address,
                    server.ssh_port, 
                    ssh_key_path,
                    "echo 'SSH Test Successful'"
                )
                
                return {
                    "server_id": server_id,
                    "connection_test": {
                        "success": result["return_code"] == 0,
                        "return_code": result["return_code"],
                        "output": result["stdout"],
                        "error": result["stderr"]
                    },
                    "debug_info": {
                        "server_ip": server.ip_address,
                        "ssh_port": server.ssh_port,
                        "ssh_key_type": ssh_key.key_type.value,
                        "temp_key_path": ssh_key_path
                    }
                }
                
            finally:
                if os.path.exists(ssh_key_path):
                    os.remove(ssh_key_path)
                    
        except Exception as e:
            print(f"‚ùå Connection test failed: {str(e)}")
            raise HTTPException(status_code=500, detail=f"Connection test failed: {str(e)}")